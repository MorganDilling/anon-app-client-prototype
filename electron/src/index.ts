import { app, BrowserWindow, ipcMain } from 'electron';
import express from 'express';
import path from 'path';
// @ts-ignore
import randomport from 'random-port';
import {
  generateCryptData,
  findKeyFromPassResetKeyAndEncryptedPrivateKey,
  asymmetricallyDecrypt,
  asymmetricallyEncrypt,
} from './lib/crypt';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.setMinimumSize(800, 600);
  mainWindow.setBackgroundColor('#24232e');
  // and load the index.html of the app.
  if (process.env.NODE_ENV === 'development')
    mainWindow.loadURL('http://localhost:5173/');
  else {
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY); // if you don't want loading page (it's trash) remove this line - its barely noticable & only really serves to not blind ur users
    const app = express();
    app.use(express.static(path.resolve(__dirname, 'static')));
    console.log('Searching for port & binding to it...');
    randomport(
      {
        from: 1024,
        to: 42070, // (not 42069 to allow 42069 as an option)
      },
      (p: number) =>
        app.listen(p, '127.0.0.1', () => {
          console.log('Listening on port %d', p);
          mainWindow.loadURL(`http://127.0.0.1:${p}/`);
        })
    );
  }

  mainWindow.maximize();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('ready', () => {
  ipcMain.handle('genData', () => generateCryptData());
  ipcMain.handle('keyRecov', (e, data) =>
    findKeyFromPassResetKeyAndEncryptedPrivateKey(data)
  );
  ipcMain.handle('isDev', () => app.isPackaged);
  ipcMain.handle('encrypt', (e, data, publicKey) =>
    asymmetricallyEncrypt(data, publicKey)
  );
  ipcMain.handle('decrypt', (e, data, privateKey, encoding) =>
    asymmetricallyDecrypt(data, privateKey, encoding)
  );
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
